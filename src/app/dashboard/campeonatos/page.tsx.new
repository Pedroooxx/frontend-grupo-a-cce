"use client";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { useCallback, useEffect, useMemo, useState } from "react";
import { DashboardLayout } from "../_components/DashboardLayout";

import { UniversalSearchBar } from "@/components/common/UniversalSearchBar";
import { AddChampionshipModal } from "@/components/modals/AddChampionshipModal";
import { ConfirmDeleteModal } from "@/components/modals/ConfirmDeleteModal";
import { useModal } from "@/hooks/useModal";
import { SearchResult, SearchConfig } from "@/hooks/useSearch";
import {
  useCreateChampionship,
  useDeleteChampionship,
  useGetAllChampionships,
  useUpdateChampionship,
} from "@/services/championshipService";
import type { Championship, ChampionshipFormValues } from "@/types/championship";
import { 
  ArrowRight,
  Calendar, 
  Crown,
  Edit, 
  Eye, 
  MapPin,
  Plus, 
  Target,
  Trash2, 
  Trophy, 
  Users 
} from "lucide-react";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";

const Campeonatos = () => {
  const router = useRouter();
  const { isOpen, openModal, closeModal } = useModal();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState<"all" | "Ativo" | "Planejado" | "Finalizado">("all");
  const [editingChampionship, setEditingChampionship] = useState<Championship | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Delete confirmation modal state
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deleteItemId, setDeleteItemId] = useState<number | null>(null);
  const [deleteItemName, setDeleteItemName] = useState<string>("");

  // Fetch championships from backend
  const {
    data: championshipsData = [],
    isLoading: isLoadingChampionships,
    isError: isGetError,
    error: getError,
  } = useGetAllChampionships();

  // Mutation hooks
  const createChampionship = useCreateChampionship();
  const updateChampionship = useUpdateChampionship();
  const deleteChampionship = useDeleteChampionship();

  // Map API data to internal type
  const campeonatos = useMemo(() => {
    return championshipsData.map((c) => {
      // Map status from API to internal format
      const mapStatus = (apiStatus: string): 'Ativo' | 'Planejado' | 'Finalizado' => {
        switch (apiStatus) {
          case 'ongoing':
          case 'Ativo':
            return 'Ativo';
          case 'upcoming':
          case 'planned':
          case 'Planejado':
            return 'Planejado';
          case 'completed':
          case 'Finalizado':
            return 'Finalizado';
          default:
            return 'Planejado';
        }
      };

      return {
        championship_id: c.championship_id,
        name: c.name,
        description: c.description,
        format: (c.format === 'single_elimination' ? 'simple' : 'double') as 'simple' | 'double',
        start_date: c.start_date,
        end_date: c.end_date,
        location: c.location,
        status: mapStatus(c.status),
        prize: typeof c.prize === 'string' ? Number(c.prize) : c.prize,
        user_id: c.user_id,
        teams_count: (c as any).teams_count ?? 0,
        matches_count: (c as any).matches_count ?? 0,
      };
    });
  }, [championshipsData]);

  // Error notifications
  useEffect(() => {
    if (isGetError && getError) toast.error(`Erro ao carregar campeonatos: ${getError.message}`);
  }, [isGetError, getError]);

  // Open modal for creating new championship
  const handleCreateChampionship = () => {
    setEditingChampionship(null);
    openModal();
  };

  // Open modal for editing championship
  const handleEditChampionship = (championship: Championship) => {
    setEditingChampionship(championship);
    openModal();
  };

  // Open delete confirmation modal
  const openDeleteModal = (id: number, name: string) => {
    setDeleteItemId(id);
    setDeleteItemName(name);
    setIsDeleteModalOpen(true);
  };

  // Close delete confirmation modal
  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setDeleteItemId(null);
    setDeleteItemName("");
  };

  // Handle delete confirmation
  const confirmDelete = useCallback(async () => {
    if (deleteItemId) {
      try {
        await deleteChampionship.mutateAsync(deleteItemId);
        toast.success("Campeonato excluído com sucesso!");
      } catch (err) {
        console.error(err);
        toast.error("Erro ao excluir campeonato");
      }
    }
    closeDeleteModal();
  }, [deleteItemId, deleteChampionship, closeDeleteModal]);

  // Handle saving championship (create/edit)
  const handleSaveChampionship = useCallback(async (data: ChampionshipFormValues) => {
    const payload = { ...data, prize: String(data.prize) };
    try {
      if (editingChampionship) {
        await updateChampionship.mutateAsync({ id: editingChampionship.championship_id, data: payload });
        toast.success("Campeonato atualizado com sucesso!");
      } else {
        await createChampionship.mutateAsync(payload);
        toast.success("Campeonato criado com sucesso!");
      }
      closeModal();
    } catch (err) {
      console.error(err);
      toast.error("Erro ao salvar campeonato");
    }
  }, [editingChampionship, createChampionship, updateChampionship, closeModal]);

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      'Ativo': { label: 'Ativo', color: 'bg-green-500/20 text-green-400' },
      'Finalizado': { label: 'Finalizado', color: 'bg-blue-500/20 text-blue-400' },
      'Planejado': { label: 'Planejado', color: 'bg-yellow-500/20 text-yellow-400' },
      // Legacy mappings for backwards compatibility
      'em andamento': { label: 'Ativo', color: 'bg-green-500/20 text-green-400' },
      'ongoing': { label: 'Ativo', color: 'bg-green-500/20 text-green-400' },
      'finalizado': { label: 'Finalizado', color: 'bg-blue-500/20 text-blue-400' },
      'completed': { label: 'Finalizado', color: 'bg-blue-500/20 text-blue-400' },
      'próximo': { label: 'Planejado', color: 'bg-yellow-500/20 text-yellow-400' },
      'upcoming': { label: 'Planejado', color: 'bg-yellow-500/20 text-yellow-400' },
      'planned': { label: 'Planejado', color: 'bg-yellow-500/20 text-yellow-400' },
      'planejado': { label: 'Planejado', color: 'bg-yellow-500/20 text-yellow-400' },
    };
    
    const config = statusConfig[status] || statusConfig[status.toLowerCase()] || 
      { color: 'bg-gray-500/20 text-gray-400', label: status };
    
    return (
      <Badge className={config.color}>
        {config.label}
      </Badge>
    );
  };

  /**
   * Search function using real API data (similar to public page)
   * @param query - Search query string
   * @param types - Array of search types to include
   * @returns Array of search results
   */
  const searchFunction = useCallback((query: string, types: string[]): SearchResult[] => {
    if (!query.trim()) return [];
    
    const searchQuery = query.toLowerCase();
    const results: SearchResult[] = [];

    // Search championships
    if (types.includes("championship") && Array.isArray(championshipsData)) {
      const championshipResults = championshipsData
        .filter(championship =>
          championship && championship.name &&
          (championship.name.toLowerCase().includes(searchQuery) ||
          (championship.description && championship.description.toLowerCase().includes(searchQuery)) ||
          (championship.location && championship.location.toLowerCase().includes(searchQuery)))
        )
        .map(championship => ({
          id: championship.championship_id,
          name: championship.name,
          type: "championship" as const,
          subtitle: `${championship.location || "Local não definido"} - ${championship.status}`,
          metadata: {
            status: championship.status,
            location: championship.location,
            startDate: championship.start_date,
            endDate: championship.end_date,
          },
        }));
      results.push(...championshipResults);
    }

    return results.slice(0, 8);
  }, [championshipsData]);

  const handleSearchResultClick = (result: SearchResult) => {
    console.log('Result clicked:', result);
    
    if (result.type === 'championship') {
      // In dashboard, navigate to championship details in dashboard context
      router.push(`/dashboard/campeonatos/${result.id}`);
    } else if (result.type === 'team') {
      // Handle team navigation in dashboard context
      router.push(`/dashboard/equipes/${result.id}`);
    } else if (result.type === 'player') {
      // Handle player navigation in dashboard context
      const playerTeamId = result.metadata?.teamId;
      if (playerTeamId) {
        router.push(`/dashboard/equipes/${playerTeamId}`);
      }
    } else if (result.type === 'match') {
      // Handle match navigation in dashboard context
      const championshipId = result.metadata?.championshipId;
      if (championshipId) {
        router.push(`/dashboard/campeonatos/${championshipId}/partidas/${result.id}`);
      }
    }
  };

  // Configuration for UniversalSearchBar
  const searchConfig: SearchConfig = {
    searchTypes: ["championship", "team", "player", "match"],
    placeholder: "Buscar campeonatos, equipes, jogadores ou partidas...",
    maxResults: 8,
    minQueryLength: 1,
    debounceMs: 300,
  };

  // Get default values for editing
  const getDefaultValues = (): Partial<ChampionshipFormValues> | undefined => {
    if (!editingChampionship) return undefined;

    return {
      championship_id: editingChampionship.championship_id,
      name: editingChampionship.name,
      description: editingChampionship.description,
      format: editingChampionship.format,
      start_date: editingChampionship.start_date,
      end_date: editingChampionship.end_date,
      location: editingChampionship.location,
      status: editingChampionship.status,
      prize: editingChampionship.prize,
      user_id: editingChampionship.user_id,
    };
  };

  const filteredChampionships = campeonatos.filter(championship => {
    const matchesSearch = championship.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         (championship.description ?? '').toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === 'all' || championship.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  /**
   * Format date in Brazilian format (DD/MM/YYYY)
   */
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  return (
    <DashboardLayout
      title="GERENCIAR"
      subtitle="CAMPEONATOS"
      breadcrumbs={[
        { label: "DASHBOARD", href: "/dashboard" },
        { label: "CAMPEONATOS" },
      ]}
    >
      {isLoadingChampionships ? (
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto mb-4"></div>
            <p className="text-slate-400">Carregando campeonatos...</p>
          </div>
        </div>
      ) : isGetError ? (
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <Trophy className="w-16 h-16 text-red-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold mb-2 text-white">Erro ao carregar campeonatos</h2>
            <p className="text-slate-400">Tente novamente mais tarde</p>
          </div>
        </div>
      ) : (
        <div className="p-8 space-y-6">
          {/* Header com botão de criar */}
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-white">Campeonatos</h1>
            <Button 
              className="bg-red-500 hover:bg-red-600 text-white"
              onClick={handleCreateChampionship}
            >
              <Plus className="w-4 h-4 mr-2" />
              Criar Campeonato
            </Button>
          </div>

          {/* Filtros e busca */}
          <div className="flex flex-col md:flex-row gap-4 mb-8">
            {/* Barra de busca */}
            <div className="flex-1 relative">
              <UniversalSearchBar
                searchFunction={searchFunction}
                config={searchConfig}
                onQueryChange={setSearchQuery}
                onResultClick={handleSearchResultClick}
                className="w-full"
              />
            </div>
            
            {/* Status Filter */}
            <div className="md:w-48">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value as any)}
                className="w-full py-3 px-4 bg-slate-800 border border-slate-700 rounded-md text-white focus:outline-none focus:ring-2 focus-ring-red-500"
              >
                <option value="all">Todos os Status</option>
                <option value="Planejado">Planejados</option>
                <option value="Ativo">Ativos</option>
                <option value="Finalizado">Finalizados</option>
              </select>
            </div>
          </div>
          
          {/* Results Count */}
          <div className="mb-6">
            <p className="text-slate-400">
              {filteredChampionships.length} campeonato{filteredChampionships.length !== 1 ? 's' : ''} encontrado{filteredChampionships.length !== 1 ? 's' : ''}
            </p>
          </div>

          {/* Grid de campeonatos */}
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {filteredChampionships.length === 0 ? (
              // Empty state
              <div className="col-span-full text-center py-12">
                <Trophy className="w-16 h-16 text-slate-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-slate-400 mb-2">
                  Nenhum campeonato encontrado
                </h3>
                <p className="text-slate-500">
                  Tente ajustar os filtros ou termos de busca
                </p>
              </div>
            ) : (
              // Render championships
              filteredChampionships.map((championship) => (
                <Card
                  key={championship.championship_id}
                  className="dashboard-card border-slate-700 p-6 hover:bg-slate-750 transition-colors flex flex-col min-h-[320px]"
                >
                  <div className="flex items-start justify-between mb-4">
                    <h3 className="text-xl font-semibold text-white flex-1 mr-3">
                      {championship.name}
                    </h3>
                    {getStatusBadge(championship.status)}
                  </div>

                  <p className="text-slate-400 mb-6 flex-1 text-sm leading-relaxed">
                    {championship.description && championship.description.length > 120
                      ? `${championship.description.substring(0, 120)}...`
                      : championship.description || 'Campeonato emocionante com equipes competitivas'
                    }
                  </p>

                  <div className="space-y-3 mb-6">
                    <div className="flex items-center text-slate-300 text-sm">
                      <Calendar className="w-4 h-4 text-red-500 mr-2 flex-shrink-0" />
                      <span>{formatDate(championship.start_date)} - {formatDate(championship.end_date)}</span>
                    </div>
                    {championship.location && (
                      <div className="flex items-center text-slate-300 text-sm">
                        <MapPin className="w-4 h-4 text-red-500 mr-2 flex-shrink-0" />
                        <span>{championship.location}</span>
                      </div>
                    )}
                    {championship.prize && (
                      <div className="flex items-center text-yellow-500 text-sm">
                        <Crown className="w-4 h-4 mr-2" />
                        <span>{typeof championship.prize === 'string' ? championship.prize : `R$ ${championship.prize.toLocaleString('pt-BR')}`}</span>
                      </div>
                    )}
                    <div className="flex items-center justify-between text-slate-300 text-sm">
                      <div className="flex items-center">
                        <Users className="w-4 h-4 text-red-500 mr-2" />
                        <span>{championship.teams_count} equipes</span>
                      </div>
                      {championship.matches_count > 0 && (
                        <div className="flex items-center">
                          <Target className="w-4 h-4 text-red-500 mr-2" />
                          <span>{championship.matches_count} partidas</span>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="flex space-x-2 pt-4 border-t border-gray-700 mt-auto">
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-1 border-slate-600 text-slate-300 hover:text-white flex items-center justify-center"
                      onClick={() => router.push(`/dashboard/campeonatos/${championship.championship_id}`)}
                    >
                      Ver Detalhes
                      <ArrowRight className="w-4 h-4 ml-2" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-none border-slate-600 text-slate-300 hover:text-white"
                      onClick={() => handleEditChampionship(championship)}
                    >
                      <Edit className="w-4 h-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-none border-red-500 text-red-500 hover:bg-red-500 hover:text-white"
                      onClick={() => openDeleteModal(championship.championship_id, championship.name)}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </Card>
              ))
            )}
          </div>

          {/* Stats rápidas */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
            <Card className="dashboard-card border-gray-700 p-6">
              <div className="flex items-center space-x-3">
                <div className="p-3 bg-green-500/20 rounded-lg">
                  <Trophy className="w-6 h-6 text-green-500" />
                </div>
                <div>
                  <p className="dashboard-text-muted text-sm">
                    Campeonatos Ativos
                  </p>
                  <p className="text-2xl font-bold text-white">
                    {campeonatos.filter(
                      (c) =>
                        c.status === "Ativo"
                    ).length}
                  </p>
                </div>
              </div>
            </Card>
            <Card className="dashboard-card border-gray-700 p-6">
              <div className="flex items-center space-x-3">
                <div className="p-3 bg-blue-500/20 rounded-lg">
                  <Users className="w-6 h-6 text-blue-500" />
                </div>
                <div>
                  <p className="dashboard-text-muted text-sm">Equipes Totais</p>
                  <p className="text-2xl font-bold text-white">
                    {campeonatos.reduce(
                      (sum, c) => sum + c.teams_count,
                      0
                    )}
                  </p>
                </div>
              </div>
            </Card>
            <Card className="dashboard-card border-gray-700 p-6">
              <div className="flex items-center space-x-3">
                <div className="p-3 bg-yellow-500/20 rounded-lg">
                  <Calendar className="w-6 h-6 text-yellow-500" />
                </div>
                <div>
                  <p className="dashboard-text-muted text-sm">Último Evento</p>
                  <p className="text-2xl font-bold text-white">
                    {campeonatos.length > 0
                      ? campeonatos
                          .sort(
                            (a, b) =>
                              new Date(b.end_date).getTime() -
                              new Date(a.end_date).getTime()
                          )[0]?.name
                      : "N/A"}
                  </p>
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {/* Add/Edit Championship Modal */}
      <AddChampionshipModal
        isOpen={isOpen}
        onClose={closeModal}
        onSubmit={handleSaveChampionship}
        defaultValues={getDefaultValues()}
        isLoading={isLoading}
      />

      {/* Delete confirmation modal */}
      <ConfirmDeleteModal
        isOpen={isDeleteModalOpen}
        onClose={closeDeleteModal}
        onConfirm={confirmDelete}
        title="Confirmar exclusão"
        entityName={`campeonato ${deleteItemName}`}
        isLoading={deleteChampionship.isPending || createChampionship.isPending || updateChampionship.isPending}
      />
    </DashboardLayout>
  );
};

export default Campeonatos;
